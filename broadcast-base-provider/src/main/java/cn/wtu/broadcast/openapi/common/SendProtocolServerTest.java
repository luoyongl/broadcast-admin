package cn.wtu.broadcast.openapi.common;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import cn.wtu.broadcast.openapi.protocol.SendProtocolTools;

public class SendProtocolServerTest implements Runnable {
	
	public Logger logger = LoggerFactory.getLogger(SendProtocolServerTest.class);
	
	private ServerSocketChannel serverSocketChannel = null;
	
	private  String replyHex;
	
	public SendProtocolServerTest(int port, String replyHex){
		try {
			if (serverSocketChannel == null) {
				serverSocketChannel = ServerSocketChannel.open();
				// 与本地端口绑定
				serverSocketChannel.socket().bind(new InetSocketAddress(port));
				// 设置为非阻塞模式
				serverSocketChannel.configureBlocking(true);
				logger.info("监听正常开启，监听端口为{}", port);
			}
		} catch (Exception e) {
			logger.error(e.getMessage() + e);
		}
		this.replyHex = replyHex;
	}
	
	@Override
	public void run() {
		while (true) {
			SocketChannel socket = null;
			try {
				socket = serverSocketChannel.accept();
				// 定义缓存
				ByteBuffer buff = ByteBuffer.allocate(1024);
				// 读取客户端数据
				socket.read(buff);
				String answer = SendProtocolTools.byteToHex(buff.array(), null);
				System.out.println("客户端数据：" + answer);
				// 服务器端回复测试数据
				ByteBuffer replyBuff =  ByteBuffer.wrap(SendProtocolTools.hexStringToByte(replyHex));
				socket.write(replyBuff);
				// 短链接，回复完毕后立刻关闭该通道
				socket.close();
			} catch (Exception e) {
				logger.error(e.getMessage() + e);
				if(socket != null){
					try {
						socket.close();
					} catch (IOException e1) {
						logger.error(e.getMessage() + e);
					}
				}
				break;
			}
		}
	}

	/**
	 * 启动测试，备注，如果要测试那个指令的回复，就可以将replyHex的值设置为对应的回复值即可
	 * @param args
	 * @throws Exception
	 */
	public static void main(String[] args) throws Exception {
/*		// 0x08 指令回复
		String replyHex0x08 = "5000011202000000080000000000000000004A0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000AC1D9D3C";
		Thread thread0x08 = new Thread(new SendProtocolServerTest(8799, replyHex0x08));
		thread0x08.start();*/
/*		// 0x09指令回复
		String replyHex0x09 = "5000011202000000080000000000000000004A0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000AC1D9D3C";
		Thread thread0x09 = new Thread(new SendProtocolServerTest(8799, replyHex0x09));
		thread0x09.start();*/
/*		// 0x0A指令回复
		String replyHex0x0A = "500001120200000008FFFFFFFF00000000004A00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003DB551ED";
		Thread thread0x0A = new Thread(new SendProtocolServerTest(8799, replyHex0x0A));
		thread0x0A.start();*/
/*		// 0x0B指令回复
		String replyHex0x0B = "5000011202000000080000000000000000004A0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000AC1D9D3C";
		Thread thread0x0B = new Thread(new SendProtocolServerTest(8799, replyHex0x0B));
		thread0x0B.start();*/
/*		// 0x3F指令回复
		String replyHex0x3F = "5000011202000000080000000000000000004A0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000AC1D9D3C";
		Thread thread0x3F = new Thread(new SendProtocolServerTest(8799, replyHex0x3F));
		thread0x3F.start();*/
/*		// 0x12指令回复
		String replyHex0x12 = "5000011202000000080000000000000000004A0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000AC1D9D3C";
		Thread thread0x12 = new Thread(new SendProtocolServerTest(8799, replyHex0x12));
		thread0x12.start();*/
/*		// 0x13指令回复
		String replyHex0x13 = "500001130200000024F43415230000000314010201020101010100000102020100000000000001000180010001004A00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002975A754";
		Thread thread0x13 = new Thread(new SendProtocolServerTest(8799, replyHex0x13));
		thread0x13.start();*/
		// 0x14指令回复
		String replyHex = "500001140200000059F4341523000000031401020105000011202000000080000000000000000004A0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000AC1D9D3C9";
		Thread thread = new Thread(new SendProtocolServerTest(8799, replyHex));
		thread.start();
/*		// 0x15指令回复
		String replyHex0x15 = "5000011502000000E0F4341523000000031401020100000004F434152300000001030101012019011400040301040130303030305C3C57695C3C5895FF0000010CF03415230000000314010400F434152300000001030101012019011400050301040130303030305C3C5CFD5C3C5E29FF0000010CF03415230000000314010400F434152300000001030101012019011400010501040130303030305C3C85975C3C87EFFF0000010CF03415230000000314010400F434152300000001030101012019011400010301000030303030305C3C85C95C3C85C9000000010CF03415230000000314010400004A0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FA3F9A66";
		Thread thread0x15 = new Thread(new SendProtocolServerTest(8799, replyHex0x15));
		thread0x15.start();*/
/*		// 0x16指令回复
		String replyHex0x16 = "50000116020000000FF43415230000000314010201000000004A000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000075C33CEC";
		Thread thread0x16 = new Thread(new SendProtocolServerTest(8799, replyHex0x16));
		thread0x16.start();*/
/*		// 0x17指令回复
		String replyHex0x17 = "50000117020000003CF43415230000000314010201F43415230000000103010101201901150002000000000000177274703A2F2F3232342E31322E31322E31323A31323132004A000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001D87355";
		Thread thread0x17 = new Thread(new SendProtocolServerTest(8799, replyHex0x17));
		thread0x17.start();*/
/*		// 0x19指令回复
		String replyHex0x18 = "500001180200000059F43415230000000314010201F43415230000000103010101201901140004010001303030303001000101021212004A0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FA3F9A66";
		Thread thread0x18 = new Thread(new SendProtocolServerTest(8799, replyHex0x18));
		thread0x18.start();	*/	
/*		// 0x19指令回复
		String replyHex0x19 = "5000011902000000E0F43415230000000314010201F43415230000000103010101201901140004004A0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FA3F9A66";
		Thread thread0x19 = new Thread(new SendProtocolServerTest(8799, replyHex0x19));
		thread0x19.start();*/
/*		//0x20指令回复
		String replyHex0x20 = "5000012002000000E001110112121212004A0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FA3F9A66";
		Thread thread0x20 = new Thread(new SendProtocolServerTest(8799, replyHex0x20));
		thread0x20.start();*/
		//0x0c指令回复
		//String replyHex = "5000011202000000080000000000000000004A0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000AC1D9D3C";
		
		//0x0D指令回复
		//String replyHex = "5000011202000000080000000000000000004A0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000AC1D9D3C";
		
		//0x0E指令回复
		//String replyHex = "500001130200000024F43415230000000314010201020101010100000102020100000000000001000180010001004A00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002975A754";
		
		//0x0f指令回复
		//String replyHex = "500001140200000059F4341523000000031401020107060006E8AF9DE7AD920001070006E7BABFE8B7AF0001010006E79FADE4BFA1000103000555E79B98000001040006E8B083E9A2910001020006E5B9B3E58FB00001000006E794B5E8AF9D0001004A0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000C2843096";
		
		//0x10指令回复
		//String replyHex = "5000011502000000E0F4341523000000031401020100000004F434152300000001030101012019011400040301040130303030305C3C57695C3C5895FF0000010CF03415230000000314010400F434152300000001030101012019011400050301040130303030305C3C5CFD5C3C5E29FF0000010CF03415230000000314010400F434152300000001030101012019011400010501040130303030305C3C85975C3C87EFFF0000010CF03415230000000314010400F434152300000001030101012019011400010301000030303030305C3C85C95C3C85C9000000010CF03415230000000314010400004A0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FA3F9A66";
		
		//0x11指令回复
		//String replyHex = "50000116020000000FF43415230000000314010201000000004A000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000075C33CEC";
		
		//0x41指令回复
		//String replyHex = "5000011202000000080000000000000000004A0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000AC1D9D3C";
		
		//IP:0x05指令回复
		//String replyHex = "5000011202000000080000000000000000004A0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000AC1D9D3C";
		
		//ip:0x06指令回复
		//String replyHex = "5000011202000000080000000000000000004A0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000AC1D9D3C";
		
		//ip:0x07指令回复
		//String replyHex = "5000011202000000080000000000000000004A0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000AC1D9D3C";
		
		//RDS:0x05指令回复
		//String replyHex = "5000011202000000080000000000000000004A0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000AC1D9D3C";
		
		//RDS:0x06指令回复
		//String replyHex = "5000011202000000080000000000000000004A0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000AC1D9D3C";
		
		//RDS:0x07指令回复
		//String replyHex = "5000011202000000080000000000000000004A0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000AC1D9D3C";
		
		//TS:0x05指令回复
		//String replyHex = "5000011202000000080000000000000000004A0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000AC1D9D3C";
		
		//TS:0x06指令回复
		//String replyHex = "5000011202000000080000000000000000004A0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000AC1D9D3C";
		
/*		// ts:0x07指令回复
		String replyHex = "5000011202000000080000000000000000004A0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000AC1D9D3C";;
		
		
		Thread thread = new Thread(new SendProtocolServerTest(8799, replyHex));
		thread.start();*/
	}
}
