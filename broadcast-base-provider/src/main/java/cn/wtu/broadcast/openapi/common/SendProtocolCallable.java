package cn.wtu.broadcast.openapi.common;

import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.FutureTask;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import cn.wtu.broadcast.openapi.model.BDeviceInfo;
import cn.wtu.broadcast.openapi.protocol.ProtocolReplyCommonData;
import cn.wtu.broadcast.openapi.protocol.ProtocolTotalInfoUtil;
import cn.wtu.broadcast.openapi.protocol.ReplyProtocolTools;
import cn.wtu.broadcast.openapi.protocol.SendProtocolTools;
import cn.wtu.broadcast.openapi.protocol.enums.ProtocolTypeEnum;
import cn.wtu.broadcast.parent.utils.redis.RedisDb;
import cn.wtu.broadcast.parent.utils.redis.Tool;

public class SendProtocolCallable implements Callable<ProtocolReplyCommonData> {

	private static Logger logger = LoggerFactory.getLogger(SendProtocolCallable.class);

	/**
	 * 发送的指令封装
	 */
	private byte[] data;

	/**
	 * 构造方法
	 * 
	 * @param data
	 * @param resourceCode
	 */
	public SendProtocolCallable(byte[] data) {
		this.data = data;
	}

	@Override
	public ProtocolReplyCommonData call() throws Exception {
		ProtocolReplyCommonData protocolReplyCommonData = new ProtocolReplyCommonData();
		BDeviceInfo deviceInfo = Tool.ByteToObject(RedisDb.getObject(("").getBytes()), BDeviceInfo.class);
		String ip = null;
		Integer port = null;
		// TODO 为了测试，将IP和端口固定了，后期改为deviceInfo != null, 同时从deviceInfo里面获取IP和端口
		if (deviceInfo == null) {
			ip = "127.0.0.1";// deviceInfo.getfDeviceIp();
			port = 8799;// Integer.valueOf(deviceInfo.getfDevicePort());
			// 初始化SocketChannel
			SocketChannel clientChannel = SocketChannel.open();
			clientChannel.configureBlocking(true);
			clientChannel.connect(new InetSocketAddress(ip, port));
			// 向服务端发送数据
			ByteBuffer sendBuff = ByteBuffer.wrap(data);
			clientChannel.write(sendBuff);
			sendBuff.clear();
			// 告诉服务端数据已经发送完毕，否则客户端和服务端都会处于阻塞状态
			clientChannel.shutdownOutput();
			// 接收服务端的反馈
			ByteBuffer receiveBuff = ByteBuffer.allocate(1024);
			clientChannel.read(receiveBuff);
			Integer protocolDataLength = ReplyProtocolTools.getProtocolLength(receiveBuff.array());
			byte[] receiveData = (byte[]) receiveBuff.limit(protocolDataLength).array();
			logger.info("线程：{} 回复指令长度：{}  回复内容：{}", Thread.currentThread().getName(), protocolDataLength, SendProtocolTools.byteToHex(receiveData, protocolDataLength));
			// 适配器回复解析操作
			String protocolType = ReplyProtocolTools.getProtocolType(receiveData);
			ProtocolTypeEnum protocolTypeEnum = ProtocolTypeEnum.getEnumByCode(protocolType);
			if (protocolTypeEnum.equals(ProtocolTypeEnum.Protocol0x12Body)){
				ProtocolTotalInfoUtil.parseProtocol0x12Data(protocolReplyCommonData, receiveData);
			}
			if (protocolTypeEnum.equals(ProtocolTypeEnum.Protocol0x13Body)){
				ProtocolTotalInfoUtil.parseProtocol0x13Data(protocolReplyCommonData, receiveData);
			}
			if (protocolTypeEnum.equals(ProtocolTypeEnum.Protocol0x14Body)) {
				ProtocolTotalInfoUtil.parseProtocol0x14Data(protocolReplyCommonData, receiveData);
			}
			if (protocolTypeEnum.equals(ProtocolTypeEnum.Protocol0x15Body)){
				ProtocolTotalInfoUtil.parseProtocol0x15Data(protocolReplyCommonData, receiveData);
			}
			if (protocolTypeEnum.equals(ProtocolTypeEnum.Protocol0x16Body)){
				ProtocolTotalInfoUtil.parseProtocol0x16Data(protocolReplyCommonData, receiveData);
			}
			if (protocolTypeEnum.equals(ProtocolTypeEnum.Protocol0x17Body)){
				ProtocolTotalInfoUtil.parseProtocol0x17Data(protocolReplyCommonData, receiveData);
			}
			if (protocolTypeEnum.equals(ProtocolTypeEnum.Protocol0x18Body)){
				ProtocolTotalInfoUtil.parseProtocol0x18Data(protocolReplyCommonData, receiveData);
			}
			if (protocolTypeEnum.equals(ProtocolTypeEnum.Protocol0x19Body)){
				ProtocolTotalInfoUtil.parseProtocol0x19Data(protocolReplyCommonData, receiveData);
			}
			if (protocolTypeEnum.equals(ProtocolTypeEnum.Protocol0x20Body)){
				ProtocolTotalInfoUtil.parseProtocol0x20Data(protocolReplyCommonData, receiveData);
			}
		}
		
		return protocolReplyCommonData;
	}

	/**
	 * 测试
	 * 
	 * @param args
	 * @throws InterruptedException
	 * @throws ExecutionException
	 * @throws TimeoutException
	 */
	public static void main(String[] args) throws InterruptedException, ExecutionException, TimeoutException {
		
		//	0x01:平台发到适配器指令
		//String data = "4900010101000000E80000000000004A00012A0600000000008D3BFA1EC278C80DE3CB688B4BE9F25142AD83A6980BDFFFE5DDAC76268984203CF667E55594EE2A430A9983D36D844A118BE0665CF21A43DFA9761B71A4C579DB78B152EF";
		//	0x02:平台发到适配器指令
		//String data = "4900010201000000E8000001020000000000004A00012B0700000000008D981478923657369D0B34A3CBE4AC0D93BFF553A3773A6AE455880794F1AA235F0F57183E423A2680078E54646DB9D7EFB6483CFA8EB57F1389269F8D07ED01311BC6877C";
		//	0x03:平台发到适配器指令
		//String data = "49000103010000000E0000000000004A00012A0600000000008D3BFA1EC278C80DE3CB688B4BE9F25142AD83A6980BDFFFE5DDAC76268984203CF667E55594EE2A430A9983D36D844A118BE0665CF21A43DFA9761B71A4C579DB78B152EF";
		//	0x21:平台发到适配器指令
		//String data = "4900012101000000E80000000000000000004A00012A0600000000008D3BFA1EC278C80DE3CB688B4BE9F25142AD83A6980BDFFFE5DDAC76268984203CF667E55594EE2A430A9983D36D844A118BE0665CF21A43DFA9761B71A4C579DB78B152EF";
		//	0x22:平台发到适配器指令
		//String data = "49000122010000000E01c0a8b1011f90004A00012A0600000000008D3BFA1EC278C80DE3CB688B4BE9F25142AD83A6980BDFFFE5DDAC76268984203CF667E55594EE2A430A9983D36D844A118BE0665CF21A43DFA9761B71A4C579DB78B152EF";
		// 查询输入通道回复(0x14):平台发到适配器指令
		String data = "4900010F010000000EF434152300000003140102010000004A00012B0700000000008D981478923657369D0B34A3CBE4AC0D93BFF553A3773A6AE455880794F1AA235F0F57183E423A2680078E54646DB9D7EFB6483CFA8EB57F1389269F8D07ED01311BC6877C";
		//  0x13:平台发到适配器指令
		//String data = "4900010E010000000EF434152300000003140102010000004A00012B0D00000000008DF2A311B84A21CA56461A04BCDC9C9A43C37E3BE8E09AC352A66357937B395C0599188A3E8B4382CA42340F2CC23CF77BD0E3BD65F5FD038C9623693F70F6F0F7BC26888D";
		//  0x15:平台发到适配器指令
		//String data = "490001100100000027F43415230000000314010201FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF005C3B33FB5C3DD701004A00012B2700000000008D2ABD2A3AAE017F48D5BAD406E9A0669C6CBBCB0DF75623EDF59C240B0DBD6579923E0AE047C13745560E5E961F7DB972EFF4784087E01C6C6B9E41894EFBE6E264CD4AC9";
		//  0x16:平台发到适配器指令
		//String data = "49000111010000000CF43415230000000314010201004A00012B1500000000008D7053B03E7354295C0A94DAB1C8DDFD46F124E5823744B24DCEB986157D9ECB97913D80EC00D21EDD0A6B798F5B2069F3FE0957FB473FAA25A5CD92DF008CC3261A95A9FE";
		//  0x17:平台发到适配器指令
		//String data = "490001040100000072F4341523000000010301010120190115000201043030303030015C3DC0065C3DCE16FF01010CF03415230000000314010400017A686F00000331323312CAE6B3C7CFD8D3A6BCB1B9E3B2A5C6BDCCA8013D000000177274703A2F2F3232342E31322E31322E31323A31323132000201020000004A0001336800000000008DABE6BF6878FC900D9CF7BF13ED2DAF1C5AFACB9F5BFDA652B47BA7DD3C152517C1E8131BF3E2E8FDACB6448D9AD300E10C1C5BD8EC367DD7F1B4791BB700F7E41C342EF1";
		//	0x12：平台发到适配器指令
		//String data = "4900013F01000000100201010CF63415231002010314010401004A0001352800000000008D5200DDA05FE44AB9AD74D3D39369C178E788E1E552491FA3B46D5885FEEC42C129CCF466C70AFCB827824C687F400A2D2E35A51AA3DD226D0F1A8849761F5436654D7154";
		//	0x08:平台发到适配器指令
		//String data = "49000108010000001F0206C0A8646C22B901010CF634152310020103140104010707060504030201004A000134F800000000008D7E950B1F03057182264EE0FA408662B8D03692E283FDBDD3380C0A2DA53918F0EA90C11D3362378B1A3A0C28F7F0EF2662DF5C34BD9773CB6610A8C14C486E89AC62C2E9";
		//	0x09:平台发到适配器指令
		//String data = "4900010901000000045C3DDF64004A0001350900000000008DECA974B387E0A516CBBD63C70B1376DDAC94786CF664BC15088C5BBEA56A33D7F24923E04DBE3342609241AC9FFA341ADF059359C05B41679DAC8BBF5BE40ECDE5A9A6E7";
		//	0x0A:平台发到适配器指令
		//String data = "4900010A010000001AC0A8646FFFFFFF00C0A86401010CF63415231002010314010401004A0001354500000000008D2FD5EDED7FF616B0624BE7B150BE1235358B319FE6EB74979BFF3F3070B5D666D39A8D2D45EDE68DD8FB6855CB9E5F5426D34B30F42E3F37581157A1FBD1DA5D14ADC267";
		//	0x0B:平台发到适配器指令
		//String data = "4900010701000000170206C0A8646C22B901010CF63415231002010314010401004A000134EB00000000008D449F5819837DCB1D791CAB069D719604432F69272FA0D8271615597A10A447B20818A8AD97BDA150D90B925450BF0852D834B991E4ECADEB608CB534A10D9CC5A20E91AA";
		//	0x3F:平台发到适配器指令
		//String data = "4900013F01000000100201010CF63415231002010314010401004A00012CB700000000008D13573B14886038B00520A41F74E2110A02EC910AB4B1C4779AC0FE048DD129928F412A02CA5DCCB2F0A0E123D4DC7DCA8B68F75695DE162144D0DABC7F5A41261BD3321F";
		//0x0c:平台发到适配器指令
		//String data="4900010C010000001A01010B3137333138393131333630026865030106341523100000004A00012A8100000000008D7C90415179468C948501BB25A8EE84B3EBE76D6138EB9A7E8F9BB050AE78BD8128CD9A66E087A86AFA6B3D269CA300B8A5B7A46956C6EA0167266B36200C9A466A9C429F";
		
		//0x0D:平台发到适配器指令
		//String data="4900010D010000000C020000003C06C0A8646C1FA3004A00012ACA00000000008D304090A172EBC0F9D7904B3B31893615DDB53E8A2B49F8D0146414673DA51C0DF48F2711312CB255CD072E03E5679993778BE144CA02E21E82A11BE7B2DED798AFDEB70C";
		
		//0x0E:平台发到适配器指令
		//String data="4900010E010000000EF434152300000003140102010000004A00012B0D00000000008DF2A311B84A21CA56461A04BCDC9C9A43C37E3BE8E09AC352A66357937B395C0599188A3E8B4382CA42340F2CC23CF77BD0E3BD65F5FD038C9623693F70F6F0F7BC26888D";
		
		//0x0F:平台发到适配器指令
		//String data="4900010F010000000EF434152300000003140102010000004A00012B0700000000008D981478923657369D0B34A3CBE4AC0D93BFF553A3773A6AE455880794F1AA235F0F57183E423A2680078E54646DB9D7EFB6483CFA8EB57F1389269F8D07ED01311BC6877C";
		
		//0x10:平台发到适配器指令
		//String data="490001100100000027F43415230000000314010201FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF005C3B33FB5C3DD701004A00012B2700000000008D2ABD2A3AAE017F48D5BAD406E9A0669C6CBBCB0DF75623EDF59C240B0DBD6579923E0AE047C13745560E5E961F7DB972EFF4784087E01C6C6B9E41894EFBE6E264CD4AC9";
		
		//0x11:平台发到适配器指令
		//String data="49000111010000000CF43415230000000314010201004A00012B1500000000008D7053B03E7354295C0A94DAB1C8DDFD46F124E5823744B24DCEB986157D9ECB97913D80EC00D21EDD0A6B798F5B2069F3FE0957FB473FAA25A5CD92DF008CC3261A95A9FE";
		//0x40:平台发到适配器指令
		//String data = "4900014001000000E80100011100004A00012A0600000000008D3BFA1EC278C80DE3CB688B4BE9F25142AD83A6980BDFFFE5DDAC76268984203CF667E55594EE2A430A9983D36D844A118BE0665CF21A43DFA9761B71A4C579DB78B152EF";
		//0x41:平台发到适配器指令
		//String data="4900014101000000E8010054000000000109080100000000008D000000000001C9402644A0114C04AF8F4B74DFA533792C97F2763F28ADADC88EBFE1072C0CF582F547A8C8141E5B2B12D9328925B6E091AA238F9C6FDF6208FF19CA255BE12B018F1000000000000100000000008D4605950513FF945967779517E93EB0FF6C9896488FB3C8516E49E2C32E37EAD70970D0120671471C0F17D0D27B105CEF6534B14804ACB2DA148A8537DF21EDF643CA10248015E646AB26F3AAEF63DF34D36AE47DE7D612ABC0D5B7FE7D431C8A9B149978DF4782D59D129A4032619901197F368515658A02E32EBB4197CBCDC25E6A004A00012A0600000000008D3BFA1EC278C80DE3CB688B4BE9F25142AD83A6980BDFFFE5DDAC76268984203CF667E55594EE2A430A9983D36D844A118BE0665CF21A43DFA9761B71A4C579DB78B152EF";
		
		//ip:0x05:平台发到适配器指令
		//String data="4900010601000000105E01010CF63415231002010314010401004A0001333300000000008D504CC190773119FF63922D7A11620330FEEB858F25ECE419A96C6DFD9093C7B53ECAFB389F37B7BE99ACBEAA0D27F7A46BBC5D5D04671F303840DCB1A9F07A653BB9B9D8";
		
		//IP:0x06:平台发到适配器指令
		//String data="49000105010000001501062048000000020CF63415231002010314010401004A000134D700000000008DA101D81AF17948C948A67F664B371C3E63271A6A58DE2F28EF1406CAE8C942A884BE336CAA10C53F356F2628E99BAAA9778B7E9882B3FCB97E4283E21ED3EAEB2B890F6F";
		
		//ip:0x07:平台发到适配器指令
		//String data="4900010701000000170206C0A8646C22B901010CF63415231002010314010401004A000134EB00000000008D449F5819837DCB1D791CAB069D719604432F69272FA0D8271615597A10A447B20818A8AD97BDA150D90B925450BF0852D834B991E4ECADEB608CB534A10D9CC5A20E91AA";
		
		//RDS:0x05:平台发到适配器指令
		//String data="4900010601000000105F01010CF63415231002010314010401004A000132C700000000008D098982076DFC3952ADBA889CE61673DD08CE6788D3200D7722B945E57381BCA31867A07E5B4C5F543F9178338207CB3591A755BD5BFB5A37E52234023987001E7C88A419";
		
		//RDS:0x06:平台发到适配器指令
		//String data="49000105010000001501062048000000020CF63415231002010314010401004A000132D300000000008DD1FF664E16453AFD7870F8E4F2A666738CC1F5A4A86FFF05EE6A94AA8FE363261EAB0D2592059DB84A5F34AF5EFFB318289163AD06320BA4B98980292BA3ECBC9B49A32D";
		
		//RDS:0x07:平台发到适配器指令
		//String data="4900010701000000170206C0A8646522B101010CF63415231002010314010401004A000132E400000000008D4255B17AEBA84C1751BE63FA35B7B02EFBFDCE77E1D3028E2056B19F3132FCD0660BCC0357DBB98542B6C5CC1AC7009152F5AC3C46991E23AA1E1EB63BF001F8361F1022";
		
		//TS:0x05:平台发到适配器指令
		//String data="4900010601000000106101010CF63415231002010314010401004A00012C6100000000008D63CB6824D1566EB930A11F77E274E8562FDB00AF69FF8FA573041E2F76E474F375BF7C2FBE07824A24D19B915E9E30407BDD5B0E47C1BF313C333248CA47EAC697A0953B";
		
		//ts:0x06:平台发到适配器指令
		//String data="49000105010000001501062048000000020CF63415231002010314010401004A00012C6E00000000008DA83C2F5B3CC357185A3FDB24D79EBBE0A6A99C9BA8B96637E7D458157EE94BE55F01AA09E7D39261574FBBAD75F5460CCF4AA59723B62DE87DAF348439727C47FF5E23B5";
		
		//ts:0x07:平台发到适配器指令
		//String data="4900010701000000170206C0A8646C22B901010CF63415231002010314010401004A00012C7800000000008D4014F0EC740916C3CBF60FA7D5486F3FF5653E4D7CBF765FF7CC5A5BB4EA1FF83A7295B9041094FEAABA6910BD5B94E3CE146C5D8721D02FCA23F7CE8F7C707578E24DFF";
		SendProtocolCallable sendProtocolCallable = new SendProtocolCallable(SendProtocolTools.hexStringToByte(data));
		FutureTask<ProtocolReplyCommonData> futureTask = new FutureTask<>(sendProtocolCallable);
		Thread thread = new Thread(futureTask);
		thread.start();
		// 方法会阻塞直到获得结果
		futureTask.get(5, TimeUnit.SECONDS);
	}
}
